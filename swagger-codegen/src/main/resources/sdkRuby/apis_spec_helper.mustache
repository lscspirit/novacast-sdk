require 'json'

module NovacastSDK
  module {{moduleName}}
    class Utils
      def self.type_check(target, type_name)
        NovacastSDK::Utils.type_check target, type_name do |model_name|
          NovacastSDK::{{moduleName}}::Models.const_get(model_name)
        end
      end
    end

    #
    # Request Processing Classes
    #

    class ApiRequests
      REQUESTS = {}

      def self.compare(req_params, api)
        req_def = find_request_definition api

        diff = {}
        req_def.each_pair do |param_name, definition|
          is_body = definition[:body_param]
          is_path = definition[:path_param]
          is_req  = definition[:required]
          data_type = definition[:type]

          # find the particular parameter value
          # if this is a body param, then use the whole request parameter object
          param_val = is_body ? req_params : req_params[param_name]

          if is_path
            # ignore path parameter
            next
          elsif param_val.nil?
            # ignore missing parameter if it is not required
            next unless is_req

            # parameter is missing but is required
            diff[param_name] = :missing
          else
            result    = NovacastSDK::{{moduleName}}::Utils.type_check param_val, data_type

            if is_body
              # ignore not allowed parameter if this is body parameter
              # because the all request params (i.e. the whole request.params) are included when checking body param
              result.reject! { |k, v| v == :not_allowed } if is_body && !result.nil?

              # merge the result to the top-level diff because
              # body parameters go to the top-level params
              diff.merge!(result) unless result.nil? || result.empty?
            else
              diff[param_name] = result unless result.nil? || result.empty?
            end
          end
        end

        diff.empty? ? nil : diff
      end

      private

      def self.find_request_definition(api)
        {{#apiInfo}}{{#apis}}if (definition = {{classname}}Requests::REQUESTS[api.to_sym])
          return definition
        {{#hasMore}}els{{/hasMore}}{{/apis}}{{/apiInfo}}end

        raise "Api '#{api}' request definition not found"
      end
    end

{{#apiInfo}}{{#apis}}
    class {{classname}}Requests < ApiRequests
      REQUESTS = { {{#operations}}{{#operation}}
        {{operationId}}: {
          {{#allParams}}
          :'{{baseName}}' => {
            type: '{{dataType}}',
            path_param: {{#isPathParam}}true{{/isPathParam}}{{^isPathParam}}false{{/isPathParam}},
            body_param: {{#isBodyParam}}true{{/isBodyParam}}{{^isBodyParam}}false{{/isBodyParam}},
            required: {{#required}}true{{/required}}{{^required}}false{{/required}}
          }{{#hasMore}},{{/hasMore}}
          {{/allParams}}
        }{{#hasMore}},{{newline}}{{/hasMore}} {{/operation}}{{/operations}}
      }
    end
{{/apis}}{{/apiInfo}}

    #
    # Response Processing Classes
    #

    class ApiResponses
      RESPONSES = {}

      def self.compare(resp_hash, api, status_code)
        resp_type = find_response_type api, status_code

        if resp_type.blank?
          # if there is no response type, then the response body is expected to be empty
          # if the body is not empty then return :invalid_type
          resp_hash.nil? ? nil : :invalid_type
        else
          NovacastSDK::Utils.type_check resp_hash, resp_type do |model_name|
            NovacastSDK::{{moduleName}}::Models.const_get(model_name)
          end
        end
      end

      def self.response_type(api, status_code)
        find_response_type api, status_code
      end

      private

      def self.resolve_status(status_code)
        if status_code.is_a?(Symbol)
          Rack::Utils::SYMBOL_TO_STATUS_CODE.fetch(status_code) do
            raise ArgumentError,
                  "Invalid HTTP status: #{status_code.inspect}"
          end
        else
          Integer(status_code)
        end
      end

      def self.find_response_type(api, status_code)
        # convert status_code in symbol into integer code
        status_code = resolve_status status_code

        definition = {{#apiInfo}}{{#apis}}if (resp = {{classname}}Responses::RESPONSES[api.to_sym])
                       resp
                     {{#hasMore}}els{{/hasMore}}{{/apis}}{{/apiInfo}}end

        # raise error if the response definition is not found for this api
        raise ArgumentError, "Api '#{api}' response definition not found" unless definition
        # raise error if the response type (or a fallback) is not defined for this status code
        raise ArgumentError, "Status code '#{status_code}' response definition not found for '#{api}'" unless (resp_type = definition[status_code] || definition[0])

        resp_type
      end
    end

{{#apiInfo}}{{#apis}}
    class {{classname}}Responses < ApiResponses
      RESPONSES = { {{#operations}}{{#operation}}
        {{operationId}}: {
          {{#responses}}
          {{code}} => '{{dataType}}'{{#hasMore}},{{/hasMore}}
          {{/responses}}
        }{{#hasMore}},{{newline}}{{/hasMore}} {{/operation}}{{/operations}}
      }
    end
{{/apis}}{{/apiInfo}}
  end
end

RSpec::Matchers.define :be_api_request do |api|
  match do |request_params|
    @actual = request_params
    @diff   = NovacastSDK::{{moduleName}}::ApiRequests.compare @actual, api
    @diff.nil?
  end

  failure_message do
    "expected request to be in #{api} format. \n\tDiff: #{@diff.to_s} \n\tactual: #{@actual} (please refer to api specification)"
  end

  failure_message_when_negated do
    "expected reqeust to not be in #{api} format \n\tactual: #{@actual}"
  end
end

RSpec::Matchers.define :be_api_response do |api, status|
  match do |response_body|
    @actual = response_body.blank? ? nil : JSON.parse(response_body)
    @diff   = NovacastSDK::{{moduleName}}::ApiResponses.compare @actual, api, status
    @diff.nil?
  end

  failure_message do
    expected_type = NovacastSDK::{{moduleName}}::ApiResponses.response_type api, status
    "expected response body be in #{api} (#{status}) format. \n\tDiff: #{@diff.to_s} \n\tactual: #{@actual} \n\texpected: #{expected_type} object (please refer to api specification)"
  end

  failure_message_when_negated do
    "expected response body to not be in #{api} (#{status}) format \n\tactual: #{@actual}"
  end
end

RSpec.shared_examples 'a novacast {{moduleName}} sdk api' do |api, status, error_klass_name = nil, error_message = nil|
  status_code = NovacastSDK::{{moduleName}}::ApiResponses.resolve_status(status)

  it "accepts request in the format defined in api specification for #{api}" do
    expect(request.params).to be_api_request(api)
  end if status_code.between?(200, 299)

  it "responses in the format defined in api specification for #{api} (#{status})" do
    expect(response.body).to be_api_response(api, status)
  end

  it "responses with a #{status} status" do
    expect(response).to have_http_status(status)
  end

  it "responses with the #{error_klass_name} error" do
    expect(response.body).to match(error_klass_name.to_s)
  end if error_klass_name

  it "responses with the error message" do
    expect(response.body).to match(error_message.to_s)
  end if error_message
end

'use strict';

var assign     = require('object-assign');
var Deferred   = require('deferred');
var Serializer = require('../serializer');

{{#operations}}
var OPERATIONS = {
  {{#operation}}
  /*
   * {{summary}}
   * {{notes}}
{{#allParams}}{{#required}}   * @param {{paramName}} - {{description}}
{{/required}}{{/allParams}}{{#allParams}}{{^required}}{{^hasMore}}   * @param {Object.<string, *>} optionals - optional parameters
{{/hasMore}}{{/required}}{{/allParams}}{{#allParams}}{{^required}}   * @param {{=<% %>=}}{<%dataType%>}<%={{ }}=%> optionals.{{paramName}} - {{description}}
{{/required}}{{/allParams}}   * @return {{=<% %>=}}{<%#returnType%><%returnType%><%/returnType%><%^returnType%>nil<%/returnType%>}<%={{ }}=%>
   */
  {{nickname}} : function({{#allParams}}{{#required}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/required}}{{/allParams}}{{#allParams}}{{^required}}{{^hasMore}}optionals{{/hasMore}}{{/required}}{{/allParams}}) {
    {{! allParams ^required ^hasMore = hasOptionalParams }}
    {{#allParams}}{{^required}}{{^hasMore}}var opts = assign({}, optionals);{{/hasMore}}{{/required}}{{/allParams}}

    // check if all required parameters are present
    {{#allParams}}{{#required}}
    if (typeof {{paramName}} === 'undefined' || {{paramName}} === null) throw new Error('Required parameter "{{paramName}}" is missing');
    {{/required}}{{/allParams}}

    var op = this.buildOperation('{{path}}', '{{httpMethod}}');

    // api mime type
    op.consumes = [{{#consumes}}'{{mediaType}}'{{#hasMore}}, {{/hasMore}}{{/consumes}}];
    op.produces = [{{#produces}}'{{mediaType}}'{{#hasMore}}, {{/hasMore}}{{/produces}}];

    {{#hasPathParams}}
    // path parameters
    op.params = {
      {{#pathParams}}
      '{{baseName}}': Serializer.serialize({{paramName}}, '{{dataType}}'){{#hasMore}}, {{/hasMore}}
      {{/pathParams}}
    };
    {{/hasPathParams}}

    {{#hasHeaderParams}}
    // header parameters
    op.headers = {};
    {{#headerParams}}
    {{#required}}op.headers['{{baseName}}'] = Serializer.serialize({{paramName}}, '{{dataType}}');{{/required}}
    {{^required}}if({{paramName}}) op.headers['{{baseName}}'] = Serializer.serialize(opts['{{paramName}}'], '{{dataType}}');{{/required}}
    {{/headerParams}}
    {{/hasHeaderParams}}

    {{#hasQueryParams}}
    // query parameters
    op.query = {};
    {{#queryParams}}
    {{#required}}op.query['{{baseName}}'] = Serializer.serialize({{paramName}}, '{{dataType}}');{{/required}}
    {{^required}}if({{paramName}}) op.query['{{baseName}}'] = Serializer.serialize(opts['{{paramName}}'], '{{dataType}}');{{/required}}
    {{/queryParams}}
    {{/hasQueryParams}}

    {{#hasFormParams}}
    // form parameters
    op.form = {};
    {{#formParams}}
    {{#required}}op.form['{{baseName}}'] = Serializer.serialize({{paramName}}, '{{dataType}}');{{/required}}
    {{^required}}if({{paramName}}) op.form['{{baseName}}'] = Serializer.serialize(opts['{{paramName}}'], '{{dataType}}');{{/required}}
    {{/formParams}}
    {{/hasFormParams}}

    {{#hasBodyParam}}{{#bodyParam}}
    // http body (model)
    op.body = Serializer.serialize({{#required}}{{paramName}}{{/required}}{{^required}}opts['{{paramName}}']{{/required}}, '{{dataType}}');
    {{/bodyParam}}{{/hasBodyParam}}

    {{#hasAuthMethods}}
    // authentication requirement
    op.auths = [{{#authMethods}}
      { name: '{{{name}}}', key: '{{keyParamName}}', in_query: {{#isKeyInQuery}}true{{/isKeyInQuery}}{{^isKeyInQuery}}false{{/isKeyInQuery}} }{{#hasMore}},{{newline}}{{/hasMore}}
    {{/authMethods}}];
    {{/hasAuthMethods}}

    // response types
    var resp_types = {
      {{#responses}}
      {{code}}: '{{dataType}}'{{#hasMore}},{{/hasMore}}
      {{/responses}}
    };

    // execute the operation
    var op_defer = Deferred();
    op.execute().done(function(result) {
      var return_obj = Serializer.deserialize(result.body, resp_types[result.statusCode] || resp_types[0]);
      op_defer.resolve(return_obj);
    }, function(result) {
      if (result instanceof Error) {
        result.messages = [result.message];
        op_defer.reject(result);
      } else {
        var api_error = Serializer.deserialize(result.body, resp_types[result.statusCode] || resp_types[0]);

        // converts the api error into a javascript error object
        var err_obj = new Error(api_error.messages.join(', '));
        err_obj.name = api_error.klass_name;
        err_obj.messages = api_error.messages;

        op_defer.reject(err_obj);
      }
    });

    return op_defer.promise;
  }{{#hasMore}},{{/hasMore}}
  {{/operation}}
};

module.exports = OPERATIONS;

{{/operations}}
